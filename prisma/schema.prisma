generator client {
    provider      = "prisma-client-js"
    output        = "../prisma-client"
    binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    address    String     @id
    externalId String?    @unique
    username   String?
    avatar     Int        @default(1)
    email      String?    @unique
    activities Activity[]
    groups     Group[]

    gridAccount GridAccount?
}

model GridAccount {
    id String @id

    authentication String

    userAddress String @unique
    user        User   @relation(fields: [userAddress], references: [address])

    sessions SessionSecrets[]
}

model SessionSecrets {
    publicKey  String              @id
    privateKey String
    provider   GridSessionProvider
    tag        GridSessionTags

    GridAccount   GridAccount? @relation(fields: [gridAccountId], references: [id])
    gridAccountId String?

    @@index([gridAccountId])
}

enum GridSessionProvider {
    privy
    turnkey
    solana
    passkey
    pending
    external
}

enum GridSessionTags {
    primary
    backup
    solana
    passkey
}

model Group {
    pda          String   @id
    name         String
    created_at   DateTime @default(now())
    description  String
    tag          Tag
    cover_photo  Int
    admin        String
    participants User[]
    waiting_room String[]
}

model Activity {
    id         String       @id @default(cuid())
    title      String
    amount     Int?
    type       ActivityType
    sig        String?
    created_at DateTime     @default(now())
    User       User         @relation(fields: [userId], references: [address])
    userId     String
    group_pda  String?
}

enum ActivityType {
    credit
    debit
    transfer
    create
}

model Waitlist {
    email String @id
}

enum Tag {
    real_estate
    birthday
    finance
    lifestyle
    education
    travel
}
